 Flatten a Multilevel Doubly Linked List
 
Question:
You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

 

Example 1:

Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation:

The multilevel linked list in the input is as follows:



After flattening the multilevel linked list it becomes:


Example 2:

Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation:

The input multilevel linked list is as follows:

  1---2---NULL
  |
  3---NULL
Example 3:

Input: head = []
Output: []
 

How multilevel linked list is represented in test case:

We use the multilevel linked list from Example 1 above:

 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
The serialization of each level is as follows:

[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:

[1,2,3,4,5,6,null]
[null,null,7,8,9,10,null]
[null,11,12,null]
Merging the serialization of each level and removing trailing nulls we obtain:

[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
 

Constraints:

Number of Nodes will not exceed 1000.
1 <= Node.val <= 10^5
C++	
1
/*
2
// Definition for a Node.
3
class Node {
4
public:
5
    int val;
6
    Node* prev;
7
    Node* next;
8
    Node* child;
9
};
10
*/
11
â€‹
12
class Solution {
13
public:
14
    Node* flat(Node* head){
15
        
16
        Node* curr=head,*tail=head;
17
        while(curr){
18
            Node* child=curr->child;
19
            Node* next=curr->next;
20
            if(child){
21
                Node *tail2=flat(child);
22
                curr->next=child;
23
                child->prev=curr;
24
                tail2->next=next;
25
                curr->child=NULL;
26
                if(next)
27
                    next->prev=tail2;
28
                curr=tail;
29
            }
30
            else curr=next;
31
            if(curr) tail=curr;
32
        }
33
        return tail;
34
  }
35
    Node* flatten(Node* head) {
36
        
37
        if(head) flat(head);
38
        return head;
39
    }
40
};
